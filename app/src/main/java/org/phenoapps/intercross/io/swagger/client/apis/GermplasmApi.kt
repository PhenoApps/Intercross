/**
 * BrAPI-Germplasm
 * The Breeding API (BrAPI) is a Standardized REST ful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding. <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">General Reference Documentation</h2> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md\">URL Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md\">Response Structure</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md\">Date/Time Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md\">Location Encoding</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md\">Error Handling</a></div> <div class=\"gen-info-link\"><a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md\">Search Services</a></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Core</h2> <div class=\"brapi-section-description\">The BrAPI Core module contains high level entities used for organization and management. This includes Programs, Trials, Studies, Locations, People, and Lists</div> <div class=\"version-number\">V2.0</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Core\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Core\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapicore.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Phenotyping</h2> <div class=\"brapi-section-description\">The BrAPI Phenotyping module contains entities related to phenotypic observations. This includes Observation Units, Observations, Observation Variables, Traits, Scales, Methods, and Images</div> <div class=\"version-number\">V2.0</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Phenotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Phenotyping\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapiphenotyping.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Genotyping</h2> <div class=\"brapi-section-description\">The BrAPI Genotyping module contains entities related to genotyping analysis. This includes Samples, Markers, Variant Sets, Variants, Call Sets, Calls, References, Reads, and Vendor Orders</div> <div class=\"version-number\">V2.0</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Genotyping\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Genotyping\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigenotyping.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <div class=\"current-brapi-section brapi-section\"> <h2 class=\"brapi-section-title\">BrAPI Germplasm</h2> <div class=\"brapi-section-description\">The BrAPI Germplasm module contains entities related to germplasm management. This includes Germplasm, Germplasm Attributes, Seed Lots, Crosses, Pedigree, and Progeny</div> <div class=\"version-number\">V2.0</div> <div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/master/Specification/BrAPI-Germplasm\">GitHub</a></div> <div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Germplasm\">SwaggerHub</a></div> <div class=\"link-btn\"><a href=\"https://brapigermplasm.docs.apiary.io\">Apiary</a></div> <div class=\"stop-float\"></div> </div>  <style> .link-btn{ float: left;  margin: 2px 10px 0 0;  padding: 0 5px;  border-radius: 5px;  background-color: #ddd; } .stop-float{   clear: both; } .version-number{   float: left;    margin: 5px 10px 0 5px; } .brapi-section-title{   margin: 0 10px 0 0;   font-size: 20px; } .current-brapi-section{   font-weight: bolder;   border-radius: 5px;    background-color: #ddd; } .brapi-section{   padding: 5px 5px;  } .brapi-section-description{   margin: 5px 0 0 5px; } </style>
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.infrastructure.ApiClient
import io.swagger.client.infrastructure.ClientError
import io.swagger.client.infrastructure.ClientException
import io.swagger.client.infrastructure.MultiValueMap
import io.swagger.client.infrastructure.RequestMethod
import io.swagger.client.infrastructure.ResponseType
import io.swagger.client.infrastructure.ServerError
import io.swagger.client.infrastructure.ServerException
import io.swagger.client.infrastructure.Success
import io.swagger.client.models.BreedingMethodListResponse
import io.swagger.client.models.BreedingMethodSingleResponse
import io.swagger.client.models.GermplasmListResponse
import io.swagger.client.models.GermplasmMCPDResponse
import io.swagger.client.models.GermplasmNewRequest
import io.swagger.client.models.GermplasmPedigreeResponse
import io.swagger.client.models.GermplasmProgenyResponse
import io.swagger.client.models.GermplasmSearchRequest
import io.swagger.client.models.GermplasmSingleResponse
import org.phenoapps.intercross.io.swagger.client.infrastructure.RequestConfig

class GermplasmApi(basePath: kotlin.String = "https://test-server.brapi.org/brapi/v2") : ApiClient(basePath) {

    /**
     * Get the details of a specific Breeding Method
     * Get the details of a specific Breeding Method used to produce Germplasm
     * @param breedingMethodDbId Internal database identifier for a breeding method 
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @return BreedingMethodSingleResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun breedingmethodsBreedingMethodDbIdGet(breedingMethodDbId: kotlin.String, authorization: kotlin.String? = null): BreedingMethodSingleResponse {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String?> = mapOf("Authorization" to authorization)
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/breedingmethods/{breedingMethodDbId}".replace("{" + "breedingMethodDbId" + "}", "$breedingMethodDbId"), headers = localVariableHeaders
        )
//        val response = request<BreedingMethodSingleResponse>(
//                localVariableConfig, localVariableBody
//        )
        val response = request<BreedingMethodSingleResponse>(
                localVariableConfig, null
        )
        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as BreedingMethodSingleResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get the Breeding Methods
     * Get the list of germplasm breeding methods available in a system.
     * @param page Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @return BreedingMethodListResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun breedingmethodsGet(page: kotlin.Int? = null, pageSize: kotlin.Int? = null, authorization: kotlin.String? = null): BreedingMethodListResponse {
        val localVariableQuery: MultiValueMap = mapOf("page" to listOf("$page"), "pageSize" to listOf("$pageSize"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String?> = mapOf("Authorization" to authorization)
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/breedingmethods", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<BreedingMethodListResponse>(
                localVariableConfig, null
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as BreedingMethodListResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get the details of a specific Germplasm
     * Germplasm Details by germplasmDbId was merged with Germplasm Multi Crop Passport Data. The MCPD fields are optional and marked with the prefix [MCPD].
     * @param germplasmDbId The internal id of the germplasm 
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @return GermplasmSingleResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun germplasmGermplasmDbIdGet(germplasmDbId: kotlin.String, authorization: kotlin.String? = null): GermplasmSingleResponse {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String?> = mapOf("Authorization" to authorization)
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/germplasm/{germplasmDbId}".replace("{" + "germplasmDbId" + "}", "$germplasmDbId"), headers = localVariableHeaders
        )
        val response = request<GermplasmSingleResponse>(
                localVariableConfig, null
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as GermplasmSingleResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get the details of a specific Germplasm in MCPD format
     * Get all MCPD details of a germplasm  &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://www.bioversityInternational.org/fileadmin/user_upload/online_library/publications/pdfs/FAOBIOVERSITY_MULTI-CROP_PASSPORT_DESCRIPTORS_V.2.1_2015_2020.pdf\&quot;&gt; MCPD v2.1 spec can be found here &lt;/a&gt;  Implementation Notes  - When the MCPD spec identifies a field which can have multiple values returned, the JSON response should be an array instead of a semi-colon separated string.
     * @param germplasmDbId the internal id of the germplasm 
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @return GermplasmMCPDResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun germplasmGermplasmDbIdMcpdGet(germplasmDbId: kotlin.String, authorization: kotlin.String? = null): GermplasmMCPDResponse {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String?> = mapOf("Authorization" to authorization)
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/germplasm/{germplasmDbId}/mcpd".replace("{" + "germplasmDbId" + "}", "$germplasmDbId"), headers = localVariableHeaders
        )
        val response = request<GermplasmMCPDResponse>(
                localVariableConfig, null
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as GermplasmMCPDResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get the pedigree details of a specific Germplasm
     * Get the parentage information of a specific Germplasm
     * @param germplasmDbId the internal id of the germplasm 
     * @param notation text representation of the pedigree (optional)
     * @param includeSiblings include array of siblings in response (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @return GermplasmPedigreeResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun germplasmGermplasmDbIdPedigreeGet(germplasmDbId: kotlin.String, notation: kotlin.String? = null, includeSiblings: kotlin.Boolean? = null, authorization: kotlin.String? = null): GermplasmPedigreeResponse {
        val localVariableQuery: MultiValueMap = mapOf("notation" to listOf("$notation"), "includeSiblings" to listOf("$includeSiblings"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String?> = mapOf("Authorization" to authorization)
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/germplasm/{germplasmDbId}/pedigree".replace("{" + "germplasmDbId" + "}", "$germplasmDbId"), query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<GermplasmPedigreeResponse>(
                localVariableConfig, null
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as GermplasmPedigreeResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get the progeny details of a specific Germplasm
     * Get the germplasmDbIds for all the Progeny of a particular germplasm.  Implementation Notes  - Regarding the &#x27;&#x27;parentType&#x27;&#x27; field in the progeny object. Given a germplasm A having a progeny B and C, &#x27;&#x27;parentType&#x27;&#x27; for progeny B refers to the &#x27;&#x27;parentType&#x27;&#x27; of A toward B.
     * @param germplasmDbId the internal id of the germplasm 
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @return GermplasmProgenyResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun germplasmGermplasmDbIdProgenyGet(germplasmDbId: kotlin.String, authorization: kotlin.String? = null): GermplasmProgenyResponse {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String?> = mapOf("Authorization" to authorization)
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/germplasm/{germplasmDbId}/progeny".replace("{" + "germplasmDbId" + "}", "$germplasmDbId"), headers = localVariableHeaders
        )
        val response = request<GermplasmProgenyResponse>(
                localVariableConfig, null
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as GermplasmProgenyResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Update the details of an existing Germplasm
     * Germplasm Details by germplasmDbId was merged with Germplasm Multi Crop Passport Data. The MCPD fields are optional and marked with the prefix [MCPD].
     * @param germplasmDbId The internal id of the germplasm 
     * @param body  (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @return GermplasmSingleResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun germplasmGermplasmDbIdPut(germplasmDbId: kotlin.String, body: GermplasmNewRequest? = null, authorization: kotlin.String? = null): GermplasmSingleResponse {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String?> = mapOf("Authorization" to authorization)
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/germplasm/{germplasmDbId}".replace("{" + "germplasmDbId" + "}", "$germplasmDbId"), headers = localVariableHeaders
        )
        val response = request<GermplasmSingleResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as GermplasmSingleResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get a filtered list of Germplasm
     * Addresses these needs  - General germplasm search mechanism that accepts POST for complex queries   - Possibility to search germplasm by more parameters than those allowed by the existing germplasm search   - Possibility to get MCPD details by PUID rather than dbId
     * @param germplasmPUI Permanent unique identifier (DOI, URI, etc.) (optional)
     * @param germplasmDbId Internal database identifier (optional)
     * @param germplasmName Name of the germplasm (optional)
     * @param commonCropName The common crop name related to this germplasm (optional)
     * @param accessionNumber Unique identifiers for accessions within a genebank (optional)
     * @param collection A specific panel/collection/population name this germplasm belongs to. (optional)
     * @param genus Genus name to identify germplasm (optional)
     * @param species Species name to identify germplasm (optional)
     * @param studyDbId Search for Germplasm that are associated with a particular Study (optional)
     * @param synonym Alternative name or ID used to reference this germplasm (optional)
     * @param parentDbId Search for Germplasm with this parent (optional)
     * @param progenyDbId Search for Germplasm with this child (optional)
     * @param externalReferenceID An external reference ID. Could be a simple string or a URI. (use with &#x60;externalReferenceSource&#x60; parameter) (optional)
     * @param externalReferenceSource An identifier for the source system or database of an external reference (use with &#x60;externalReferenceID&#x60; parameter) (optional)
     * @param page Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @return GermplasmListResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun germplasmGet(germplasmPUI: kotlin.String? = null, germplasmDbId: kotlin.String? = null, germplasmName: kotlin.String? = null, commonCropName: kotlin.String? = null, accessionNumber: kotlin.String? = null, collection: kotlin.String? = null, genus: kotlin.String? = null, species: kotlin.String? = null, studyDbId: kotlin.String? = null, synonym: kotlin.String? = null, parentDbId: kotlin.String? = null, progenyDbId: kotlin.String? = null, externalReferenceID: kotlin.String? = null, externalReferenceSource: kotlin.String? = null, page: kotlin.Int? = null, pageSize: kotlin.Int? = null, authorization: kotlin.String? = null): GermplasmListResponse {
        val localVariableQuery: MultiValueMap = mapOf("germplasmPUI" to listOf("$germplasmPUI"), "germplasmDbId" to listOf("$germplasmDbId"), "germplasmName" to listOf("$germplasmName"), "commonCropName" to listOf("$commonCropName"), "accessionNumber" to listOf("$accessionNumber"), "collection" to listOf("$collection"), "genus" to listOf("$genus"), "species" to listOf("$species"), "studyDbId" to listOf("$studyDbId"), "synonym" to listOf("$synonym"), "parentDbId" to listOf("$parentDbId"), "progenyDbId" to listOf("$progenyDbId"), "externalReferenceID" to listOf("$externalReferenceID"), "externalReferenceSource" to listOf("$externalReferenceSource"), "page" to listOf("$page"), "pageSize" to listOf("$pageSize"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String?> = mapOf("Authorization" to authorization)
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/germplasm", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<GermplasmListResponse>(
                localVariableConfig, null
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as GermplasmListResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Create new Germplasm entities on this server
     * Create new Germplasm entities on this server
     * @param body  (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @return GermplasmListResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun germplasmPost(body: kotlin.Array<GermplasmNewRequest>? = null, authorization: kotlin.String? = null): GermplasmListResponse {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String?> = mapOf("Authorization" to authorization)
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/germplasm", headers = localVariableHeaders
        )
        val response = request<GermplasmListResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as GermplasmListResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Submit a search request for Germplasm
     * Search for a set of germplasm based on some criteria  Addresses these needs   - General germplasm search mechanism that accepts POST for complex queries   - Possibility to search germplasm by more parameters than those allowed by the existing germplasm search   - Possibility to get MCPD details by PUID rather than dbId  See Search Services for additional implementation details.
     * @param body  (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @return GermplasmListResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun searchGermplasmPost(body: GermplasmSearchRequest? = null, authorization: kotlin.String? = null): GermplasmListResponse {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String?> = mapOf("Authorization" to authorization)
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/search/germplasm", headers = localVariableHeaders
        )
        val response = request<GermplasmListResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as GermplasmListResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get the results of a Germplasm search request
     * See Search Services for additional implementation details.  Addresses these needs:   1. General germplasm search mechanism that accepts POST for complex queries   2. possibility to search germplasm by more parameters than those allowed by the existing germplasm search   3. possibility to get MCPD details by PUID rather than dbId
     * @param searchResultsDbId Unique identifier which references the search results 
     * @param page Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     * @param authorization HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     * @return GermplasmListResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun searchGermplasmSearchResultsDbIdGet(searchResultsDbId: kotlin.String, page: kotlin.Int? = null, pageSize: kotlin.Int? = null, authorization: kotlin.String? = null): GermplasmListResponse {
        val localVariableQuery: MultiValueMap = mapOf("page" to listOf("$page"), "pageSize" to listOf("$pageSize"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String?> = mapOf("Authorization" to authorization)
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/search/germplasm/{searchResultsDbId}".replace("{" + "searchResultsDbId" + "}", "$searchResultsDbId"), query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<GermplasmListResponse>(
                localVariableConfig, null
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as GermplasmListResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
